plugins {
  id 'java-library'
  id 'maven-publish'
  // To create a shadow/fat jar, including dependencies
  id 'com.github.johnrengelman.shadow' version '7.0.0'
}

repositories {
    // Use this only for local development!
    //  mavenLocal()

  maven {
    url "https://maven.scijava.org/content/repositories/releases"
  }

  mavenCentral()

  maven {
    url "https://maven.scijava.org/content/repositories/snapshots"
  }

}

ext.moduleName = 'qupath.extension.jinput'
ext.qupathVersion = gradle.ext.qupathVersion
ext.jinputVersion = "2.0.9"

description = "QuPath extension to support the spacemouse (and possibly other 3-D input devices)."

version = "0.3.0"

configurations {
    jinputJar
    jinputNativeJar
}

dependencies {
  def jinputDependency = "net.java.jinput:jinput:${jinputVersion}"
  def jinputNativeDependency = "${jinputDependency}:natives-all"

  implementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
  implementation jinputDependency
  implementation jinputNativeDependency

  jinputJar jinputDependency
  jinputNativeJar jinputNativeDependency

  shadow "io.github.qupath:qupath-gui-fx:0.4.0"
  shadow "org.slf4j:slf4j-api:1.7.30"
}


processResources {
  from ("${projectDir}/LICENSE") {
    into 'META-INF/licenses/'
  }
}

tasks.register("extractNativeLibs", Copy) {
    def jinputNativeJarFiles = configurations.jinputNativeJar.files
    def outputDirectory = "${buildDir}/natives/"

    from files(jinputNativeJarFiles).collect {
      println(it)
      zipTree(it)
    }
    include '*.dll'
    include '*.jnilib'
    include '*.so'
    into outputDirectory
    println "Destination directory: ${outputDirectory}"
}

// Make sure the extraction task runs before the jar task
jar.dependsOn extractNativeLibs

/*
 * Ensure Java 11 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    if (project.properties['sources'])
        withSourcesJar()
    if (project.properties['javadocs'])
        withJavadocJar()
}

/*
 * Manifest info
 */
import java.text.SimpleDateFormat;

jar {
    manifest {
        attributes(
          'Implementation-Vendor': project.group,
          'Implementation-Title': project.name,
          'Implementation-Version': archiveVersion,
          'Built-By': System.properties['user.name'],
          'Created-By': "Gradle ${gradle.gradleVersion}",
          'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
          'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
          'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
          'Automatic-Module-Name': 'io.github.' + moduleName
        )
    }

    into("") {
        from {
            configurations.jinputJar.collect { it.isDirectory() ? it : zipTree(it) }
        }
        include '**/*.class'
    }

    into("natives") {
        from("$buildDir/natives")
    }

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
def strictJavadoc = findProperty('strictJavadoc')
if (!strictJavadoc) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

javadoc {
    options.addBooleanOption('html5', true)
    destinationDir = new File(project.rootDir,"docs")
}


/*
shadowJar {
    mergeServiceFiles()

}
*/

// Add the task to the build process
//build.dependsOn extractNativeLibs

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/zindy/qupath-extension-jinput"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
//                  username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
//                  password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")

            }          
        }
    }

    publications {
        mavenJava(MavenPublication) {
//            groupId = 'io.github.qupath'
            from components.java

//            pom {
//                licenses {
//                    license {
//                        name = 'Apache License v2.0'
//                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
//                    }
//                }
//            }
        }
    }
}
